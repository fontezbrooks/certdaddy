{"version":3,"file":"preload.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNwE;AAExEA,qEAA+B,CAAC,KAAK,EAAE;EACnC;EACAG,UAAU,EAAE,oBAACC,IAAS;IAAA,OAAKH,wDAAkB,CAAC,YAAY,EAAEG,IAAI,CAAC;EAAA;EACjE;EACAE,QAAQ,EAAE,kBAACF,IAAS;IAAA,OAAKH,wDAAkB,CAAC,UAAU,EAAEG,IAAI,CAAC;EAAA;EAC7D;EACAG,WAAW,EAAE,qBAACC,QAA6B;IAAA,OAAKP,oDAAc,CAAC,UAAU,EAAE,UAACS,KAAK,EAAEC,IAAI,EAAK;MACxFH,QAAQ,CAACG,IAAI,CAAC;IAClB,CAAC,CAAC;EAAA;EACFC,QAAQ,EAAE,kBAACC,QAAa;IAAA,OAAKZ,wDAAkB,CAAC,KAAK,EAAEY,QAAQ,CAAC;EAAA;EAChEC,UAAU,EAAE,oBAACC,KAAU;IAAA,OAAKd,wDAAkB,CAAC,YAAY,EAAEc,KAAK,CAAC;EAAA;EACnEC,UAAU,EAAE,oBAACC,IAAS;IAAA,OAAKhB,wDAAkB,CAAC,YAAY,EAAEgB,IAAI,CAAC;EAAA;EACjEC,WAAW,EAAE,qBAACD,IAAS;IAAA,OAAKhB,wDAAkB,CAAC,aAAa,EAAEgB,IAAI,CAAC;EAAA;AACvE,CAAC,CAAC,C","sources":["webpack://certdaddy/external node-commonjs \"electron\"","webpack://certdaddy/webpack/bootstrap","webpack://certdaddy/webpack/runtime/compat get default export","webpack://certdaddy/webpack/runtime/define property getters","webpack://certdaddy/webpack/runtime/hasOwnProperty shorthand","webpack://certdaddy/webpack/runtime/make namespace object","webpack://certdaddy/./src/preload.ts"],"sourcesContent":["module.exports = require(\"electron\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\r\n\r\ncontextBridge.exposeInMainWorld('api', {\r\n    // Invoke Methods\r\n    testInvoke: (args: any) => ipcRenderer.invoke('fileWrite3', args),\r\n    // Send Methods\r\n    testSend: (args: any) => ipcRenderer.invoke('fileName', args),\r\n    // Receive Methods\r\n    testReceive: (callback: (arg0: any) => void) => ipcRenderer.on('fileRead', (event, data) => {\r\n        callback(data)\r\n    }),\r\n    startCsr: (filename: any) => ipcRenderer.invoke('csr', filename),\r\n    combinePfx: (paths: any) => ipcRenderer.invoke('combinePfx', paths),\r\n    installPfx: (path: any) => ipcRenderer.invoke('installPfx', path),\r\n    installCert: (path: any) => ipcRenderer.invoke('installCert', path)\r\n})\r\n"],"names":["contextBridge","ipcRenderer","exposeInMainWorld","testInvoke","args","invoke","testSend","testReceive","callback","on","event","data","startCsr","filename","combinePfx","paths","installPfx","path","installCert"],"sourceRoot":""}