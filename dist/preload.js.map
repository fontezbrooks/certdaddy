{"version":3,"file":"preload.js","mappings":"mBAAA,MAAM,EAA+BA,QAAQ,YCE7CC,EAAAA,cAAAA,kBAAgC,MAAO,CAEnCC,WAAY,SAACC,GAAS,OAAKC,EAAAA,YAAAA,OAAmB,aAAcD,EAAK,EAEjEE,SAAU,SAACF,GAAS,OAAKC,EAAAA,YAAAA,OAAmB,WAAYD,EAAK,EAE7DG,YAAa,SAACC,GAA6B,OAAKH,EAAAA,YAAAA,GAAe,YAAY,SAACI,EAAOC,GAC/EF,EAASE,EACb,GAAE,EACFC,SAAU,SAACC,GAAa,OAAKP,EAAAA,YAAAA,OAAmB,MAAOO,EAAS,EAChEC,WAAY,SAACC,GAAU,OAAKT,EAAAA,YAAAA,OAAmB,aAAcS,EAAM,EACnEC,WAAY,SAACC,GAAS,OAAKX,EAAAA,YAAAA,OAAmB,aAAcW,EAAK,EACjEC,YAAa,SAACD,GAAS,OAAKX,EAAAA,YAAAA,OAAmB,cAAeW,EAAK,EACnEE,UAAW,SAACC,GACRd,EAAAA,YAAAA,KAAiB,cAAec,EACpC,G","sources":["webpack://certdaddy/external node-commonjs \"electron\"","webpack://certdaddy/./src/preload.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';\r\n\r\ncontextBridge.exposeInMainWorld('api', {\r\n    // Invoke Methods\r\n    testInvoke: (args: any) => ipcRenderer.invoke('fileWrite3', args),\r\n    // Send Methods\r\n    testSend: (args: any) => ipcRenderer.invoke('fileName', args),\r\n    // Receive Methods\r\n    testReceive: (callback: (arg0: any) => void) => ipcRenderer.on('fileRead', (event, data) => {\r\n        callback(data)\r\n    }),\r\n    startCsr: (filename: any) => ipcRenderer.invoke('csr', filename),\r\n    combinePfx: (paths: any) => ipcRenderer.invoke('combinePfx', paths),\r\n    installPfx: (path: any) => ipcRenderer.invoke('installPfx', path),\r\n    installCert: (path: any) => ipcRenderer.invoke('installCert', path),\r\n    startDrag: (fileName: any) => {\r\n        ipcRenderer.send('ondragstart', fileName)\r\n    }\r\n})\r\n"],"names":["require","contextBridge","testInvoke","args","ipcRenderer","testSend","testReceive","callback","event","data","startCsr","filename","combinePfx","paths","installPfx","path","installCert","startDrag","fileName"],"sourceRoot":""}